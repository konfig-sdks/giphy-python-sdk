# coding: utf-8

"""
    Giphy API

    Giphy API

    The version of the OpenAPI document: 1.0
    Contact: support@giphy.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from giphy_python_sdk import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The User Object contains information about the user associated with a GIF and URLs to assets such as that user's avatar image, profile, and more.
    """


    class MetaOapg:
        
        class properties:
            avatar_url = schemas.StrSchema
            banner_url = schemas.StrSchema
            display_name = schemas.StrSchema
            profile_url = schemas.StrSchema
            twitter = schemas.StrSchema
            username = schemas.StrSchema
            __annotations__ = {
                "avatar_url": avatar_url,
                "banner_url": banner_url,
                "display_name": display_name,
                "profile_url": profile_url,
                "twitter": twitter,
                "username": username,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_url"]) -> MetaOapg.properties.avatar_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["banner_url"]) -> MetaOapg.properties.banner_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_url"]) -> MetaOapg.properties.profile_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter"]) -> MetaOapg.properties.twitter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatar_url", "banner_url", "display_name", "profile_url", "twitter", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_url"]) -> typing.Union[MetaOapg.properties.avatar_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["banner_url"]) -> typing.Union[MetaOapg.properties.banner_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_url"]) -> typing.Union[MetaOapg.properties.profile_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter"]) -> typing.Union[MetaOapg.properties.twitter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatar_url", "banner_url", "display_name", "profile_url", "twitter", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        avatar_url: typing.Union[MetaOapg.properties.avatar_url, str, schemas.Unset] = schemas.unset,
        banner_url: typing.Union[MetaOapg.properties.banner_url, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        profile_url: typing.Union[MetaOapg.properties.profile_url, str, schemas.Unset] = schemas.unset,
        twitter: typing.Union[MetaOapg.properties.twitter, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            avatar_url=avatar_url,
            banner_url=banner_url,
            display_name=display_name,
            profile_url=profile_url,
            twitter=twitter,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )
